name: CI/CD

on:
  push:

# Trigger on master for staging
# Trigger on release for production
# Determine docker image tag
  # staging -> commit sha
  # production -> release tag
# build images
# push images (dockerhub)
# deploy to correct droplet

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:  
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set ENV
      run: |-
        echo ${GITHUB_REF##*/}
        echo ${GITHUB_SHA}

        if [ ${GITHUB_REF##*/} = "dockerize-app" ]; then
          echo 1st condition match
          echo "ENV=staging" >> $GITHUB_ENV
          echo "DOCKER_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
        else 
          echo 2nd condition match
          echo "ENV=prod" >> $GITHUB_ENV
          echo "DOCKER_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
        fi

    - name: Build Docker Images
      run: make build-images

    - name: Push Docker Images
      run: make push-images
      
      # this step would create a new tag based on the latest existing in the repo
      # and also the SemVer label of your commit message - fix:, feat: or perf: for patch/minor/major
      # and push it to the repo
    - if: github.event_name == 'push' && github.ref == 'refs/heads/development' # or whichever is your release branch
      name: Bump GH tag
      id: tag_generator
      uses: mathieudutour/github-tag-action@v5.4
      with: 
        github_token: ${{ secrets.GITHUB_TOKEN }}
        default_bump: false
        release_branches: development # or whichever is your release branch
      
      # this step would automatically create a GitHub release, whenever a push commit is made to the development branch WITH a SemVer label in the commit message
    - if: steps.tag_generator.outputs.new_version != '' && github.event_name == 'push' && github.ref == 'refs/heads/development' # or whichever is your release branch
      name: Create release
      shell: pwsh # yeap, sry
      run: |
        $releaseTag = ""
        $releaseTitle = ""
        $releaseAssets = ""
        
        gh release create $releaseTag -t $releaseTitle $releaseAssets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
